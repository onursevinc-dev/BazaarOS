generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
  MANAGER
}

model User {
  id        String   @id() @default(uuid())
  name      String
  email     String   @unique
  picture   String   @db.Text
  role      Role     @default(USER)
  Store     Store[]  @relation("UserStores")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String        @id @default(uuid())
  name          String
  image         String
  url           String
  featured      Boolean       @default(false)
  subCategories SubCategory[] @relation("CategoryToSubCategory")
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  image      String
  url        String
  featured   Boolean   @default(false)
  categoryId String
  category   Category  @relation("CategoryToSubCategory", fields: [categoryId], references: [id])
  products   Product[] @relation("SubCategoryToProduct")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                     String      @id @default(uuid())
  name                   String
  description            String      @db.Text
  email                  String      @unique
  phone                  String
  url                    String      @unique
  logo                   String
  cover                  String
  status                 StoreStatus @default(PENDING)
  averageRating          Float       @default(0)
  featured               Boolean     @default(false)
  returnPolicy           String?
  defaultShippingService String?
  defaultShippingFees    Float?
  defaultDeliveryTimeMin Int?
  defaultDeliveryTimeMax Int?
  userId                 String
  user                   User        @relation("UserStores", fields: [userId], references: [id])
  products               Product[]   @relation("StoreToProduct")
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@index([userId])
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String
  slug          String
  brand         String
  rating        Float            @default(0)
  storeId       String
  store         Store            @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String
  category      Category         @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subCategoryId String
  subCategory   SubCategory      @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])
  variants      ProductVariant[] @relation("ProductToProductVariant")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
}

model ProductVariant {
  id                 String                @id @default(uuid())
  variantName        String
  variantDescription String
  slug               String
  isSale             Boolean               @default(false)
  keywords           String
  sku                String
  productId          String
  product            Product               @relation("ProductToProductVariant", fields: [productId], references: [id])
  sizes              Size[]                @relation("ProductVariantSizes")
  images             ProductVariantImage[] @relation("ProductVariantToVariantImage")
  colors             Color[]               @relation("ProductVariantToColors")
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  @@index([productId])
}

model Size {
  id               String         @id @default(uuid())
  size             String
  quantity         Int
  price            Float
  discount         Float          @default(0)
  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantSizes", fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([productVariantId])
}

model ProductVariantImage {
  id               String         @id @default(uuid())
  url              String
  alt              String         @default("")
  productVariantId String
  produtvariant    ProductVariant @relation("ProductVariantToVariantImage", fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([productVariantId])
}

model Color {
  id               String         @id @default(uuid())
  name             String
  productVariantId String
  produtvariant    ProductVariant @relation("ProductVariantToColors", fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([productVariantId])
}
